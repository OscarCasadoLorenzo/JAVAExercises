#General configurations
server.port=8080
spring.application.name=backWeb

#EUREKA Discovery config
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

# H2 Connection parameters
spring.datasource.url=jdbc:h2:file:~/virtualtravel;AUTO_SERVER=TRUE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
hibernate.dialect=org.hibernate.dialect.HSQLDialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# ANSI ON
spring.output.ansi.enabled=always

# KAFKA general config
spring.kafka.consumer.properties.spring.json.trusted.packages= *

#KAFKA consumer config
spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.auto-offset-reset= earliest
spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping= TicketOutputDTO:spring.springboot.WebBackend.infraestructure.controller.dto.input.TicketInputDTO

#KAFKA producer config
spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping= TicketOutputDTO:spring.springboot.WebBackend.infraestructure.controller.dto.output.TicketOutputDTO